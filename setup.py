# Python Standard Library
import os
import sys
import site
import subprocess
from sysconfig import get_config_var
from pathlib import Path
from typing import Union, Callable

# PyPI packages (build dependencies)
from setuptools.dist import Distribution
from setuptools import setup, Extension
from setuptools.command.build_ext import build_ext

site.ENABLE_USER_SITE = True


def normalize_win_path(pathstr: Union[Path, str], quote_char="'") -> str:
    """
    Normalize the a Windows string path.
    This function was created to solve a compilation issue in Windows
    mingw. It first replaces the backslashes in a path string with
    common slashes, then escapes the eventual spaces in the path
    """
    return "{}{}{}".format(quote_char, str(pathstr).replace("\\", "/"), quote_char)


class SwigExtension(Extension):
    """
    Custom python extension
    """

    def __init__(self, name: str, build_cmd: Callable, **kwargs):
        Extension.__init__(self, name, sources=[], **kwargs)
        self.build_cmd: Callable = build_cmd


class CustomBuildExtensionsCmd(build_ext):
    """
    Custom build_ext command
    """

    def run(self):
        """
        Build custom (SwigExtension) and regular extensions
        """
        regular_extensions = []
        # Build SwigExtension. Unlike the regular extensions defined with the
        # Extension class, SwigExtension extensions are built inplace and then
        # copied to the build directory, if necessary
        for ext in self.extensions:
            if not isinstance(ext, SwigExtension):
                regular_extensions.append(ext)
                continue

            # Run build command
            ext.build_cmd()

            # Copies extension files to build folder only if --inplace option
            # is not used
            if not self.inplace:
                self.copy_swig_extension_to_build(ext)

        # Build the regular extensions
        self.extensions = regular_extensions
        build_ext.run(self)

    def copy_swig_extension_to_build(self, ext: SwigExtension):
        """
        Copy swig extension files to build folder to be later copied to the lib
        directory.
        Regular extensions defined with the Extension class are built in the
        build folder and, if the --inplace option is used
        (build_ext.inplace == True), then the files are copied to the source
        directory.
        With custom SwigExtension extensions, because a custom build command is
        used, they are built inplace and then copied to the build directory.
        """
        if not isinstance(ext, SwigExtension):
            raise Exception("Not a SwigExtension!")

        build_py = self.get_finalized_command("build_py")
        fullname = self.get_ext_fullname(ext.name)
        modpath = fullname.split(".")
        package = ".".join(modpath[:-1])
        package_dir = build_py.get_package_dir(package)

        # The compiled shared library file
        # (e.g., _my_module.cpython-36m-x86_64-linux-gnu.so)
        shlib_filename = (
            Path(*modpath[:-1]) / f"_{modpath[-1]}{get_config_var('EXT_SUFFIX')}"
        )
        # The python wrapper file generated by swig (e.g., my_module.py)
        wrapper_filename = Path(*modpath[:-1]) / f"{modpath[-1]}.py"

        for filename in [shlib_filename, wrapper_filename]:
            src_filename = Path(package_dir) / filename.name
            dest_filename = Path(self.build_lib) / filename

            self.copy_file(
                str(src_filename),
                str(dest_filename),
                level=self.verbose,
            )


if __name__ == "__main__":
    wheel_tag = "-".join(Distribution().get_command_obj("bdist_wheel").get_tag())

    root_dir: Path = Path(__file__).parent
    build_dir: Path = root_dir / f"build-cmake-release-{wheel_tag}"

    def build_cmd():
        """
        The build command for the Python extension module
        """
        root_dir_norm: str = normalize_win_path(root_dir, '"')
        build_dir_norm: str = normalize_win_path(build_dir, '"')
        python_exe: str = normalize_win_path(sys.executable, '"')

        try:
            cmd = (
                f"cmake -S {root_dir_norm} -B {build_dir_norm} "
                f"-DPython3_EXECUTABLE={python_exe} "
                "-DCMAKE_BUILD_TYPE=Release"
            )
            subprocess.run(cmd, shell=True, check=True)

            cmd = (
                f"cmake --build {build_dir_norm} "
                "--target pymatcalc --config Release --parallel"
            )
            subprocess.run(cmd, shell=True, check=True)

            cmd = f"cmake --install {build_dir_norm}"
            subprocess.run(cmd, shell=True, check=True)

        except subprocess.CalledProcessError:
            raise

    # Define the pymatcalc extension module
    pymatcalc_ext: SwigExtension = SwigExtension(
        name="pymatcalc.pymatcalc",
        build_cmd=build_cmd,
    )

    setup(
        name="pymatcalc",
        version="0.1.1",
        author="Arthur Nishikawa",
        description="Python Interface to MatCalc",
        packages=["pymatcalc"],
        include_package_data=True,
        ext_modules=[pymatcalc_ext],
        # Override behaviour of build_ext
        cmdclass={"build_ext": CustomBuildExtensionsCmd},
    )
